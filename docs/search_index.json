[
["index.html", "XAI: Explainable artificial intelligence Preface", " XAI: Explainable artificial intelligence Christoph Molnar 2017-03-29 Preface This book is about explainable artificial intelligence, focusing on machine learning algorithm. Machine learning is getting infused in many products and processes of our daily lives, yet decisions made by machines often come without any explanation for the decision. An explanation increases the trust in the decision and in the algorithm. Also as the programmer of an algorithm you want to know whether you can trust the learned model. Did it learn generalizable features? Or are there some odd artifacts in the training data which the algorithm picked up? This book will give an overview over techniques that can be used to make black boxes as transparent as possible and explain decisions. In the first chapter algorithms that produce simple, explainable models are introduced together with instructions how to interpret the output. The later chapters focus on analyzing complex models and their decisions. In an ideal future, machines will be able to explain their decisions and make a transition into an algorithmic age more human. This books is recommended for machine learning practitioners, data scientists, statisticians and also for stakeholders deciding on the use of machine learning and intelligent algorithms. The online version of this book (currently the only available version) is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. "],
["intro.html", "1 Introduction 1.1 What is machine learning and why is it important? 1.2 Why is explainability important? 1.3 Who this book is for 1.4 Outline of the book 1.5 Is good user experience enough? 1.6 Scope of explainability 1.7 Measuring explainability / comprehensibility / interpretability 1.8 Definitions 1.9 Terminology", " 1 Introduction Start with motivational examples. Things that went wrong. 1.1 What is machine learning and why is it important? Black box 1.2 Why is explainability important? Machine learning has come to a state where you have to make a trade-off: Do you simply want to know what will happen? For example if a client will churn or if medication will work well for a patient. Or do you want to know why something will happen and paying for the explainability with accuracy? In some cases you will not care why a decision was made, only the assurance that the accuracy was good on some test set is enough. But in other cases knowing the ‘why’ can help you understand more about the problem, the data and also know why a model might fail. 1.3 Who this book is for This book is for everyone who wants to learn how to make machine learning models more explainable. It is a recommended reading for machine learning practitioners, statisticians, data scientists and everyone who has contact with machine learning applications. It contains one or the other formula, but it’s kept at a manageable level of math. This book is not for people who are trying to learn machine learning from scratch. If you want to learn machine learning, there are loads of books and other resources for learning the basics. 1.4 Outline of the book Definition of interpretability / explainability System is interpretable if it falls into certain class of models, where authors claim that this class is interpretable and the authors present algorithms to optimize within that class. [Towards A Rigorous Science of Interpretable Machine Learning] There is no good definition of interpretability yet? Classic statistics usually aims at having interpretable models. That’s why doctors, sociologists and banks tend to go to statisticians with research questions instead of computer scientists. Some systems need more interpretability. The more impactful the decision, the more explainable it should be. A possibly incorrect product recommendation might is not as bad as a wrong diagnose and recommendation of an inappropriate treatment. Need for explainability arises when something goes wrong. Because having an explanation for a faulty classification helps to understand the cause of the fault. It delivers a direction for how to fix the system. Consider an example of a husky versus wolf classifier, that missclassifies some huskys as wolfs. If there is an explanation to the classification you can see, that the missclassification happend due to the snow on the image. The classifier learned to use snow as a feature for classifying images as wolfs, which might make sense in terms of separating features in the training data set, but not in the real world use. [TODO: Add image from Ribeiro + ask for permission] As a machine learning practitioner, your main goal is to drive down the loss function while also keeping the learned model generalizable to other data sets. 1.5 Is good user experience enough? Maybe it is enough to show that the algorithm works and does what it is supposed to. The recommended movies are all reasonable and my self-driving car never had an accident. We have to distinguish between between low and high stakes scenario and individual risks and systematic biases. For low-risk applications (e.g. product recommender systems) there is not so much damage if something goes wrong. No one will die because they got a product recommendation on Amazon for something they are not interested in. Biggest risk is for the company deploying those algorithms that they do not work and loose customers to competitors. But there is the risk for a systematic bias and while for each individual the impact might be negligible on a group or society level it is quite problematic. Social bubbles through newsfeeds? An example is a restaurant recommender system that would never recommend restaurants to a certain minority, because they are from that minority. High risk applications are self-driving cars, AI doctors etc. Here it is quite important to have explainability. Only with explainability can you ‘debug’ why a car accident happend by a self-driving car or decide if you want to trust the diagnose of a machine learning algorithm. 1.6 Scope of explainability There are basically 1.6.1 Algorithm On this level of explainability, you are only asking how the algorithm learns, what kind of relationships it is capable of picking up. This level of explainability is what each good machine learning practitioner today usually has. If you are using convolutional neural networks for classifying images, you can explain that the algorithm learns edge detectors and filters on the lowest layers. This is an understanding of how the algorithm works, but not of the specific model that is learned in the end and not about how single decisions are reached. For this level of explainability only knowledge about the algorithm and the data is required. This book will talk a little about algorithmic explainability, but will focuse more on global and local explainability. 1.6.2 Global model explainability To explain the global model output, you need the trained model, knowledge about the algorithm and the data. This level of explainability is about understanding how the model makes the decisions, based on the features. Which features are the important ones and what kind of interactions are happening? Global model explainability helps to understand the distribution of your target variable based on the features. 1.6.3 Explain a single observation You can go all the way down to a single observation and examine what kind of classification or decision the model gives for this input, and why it gives this input. When you zoom in into one example, the conditional distribution of the target variable might behave more nicely. Locally it might depend only linearly or monotonic on some variables rather than having a complex dependency. For example the rent of an appartment might not depend linearly on the size, but if you only look at a specific appartment of 100 square meter and check how the prize changes going up plus and minus 10 square meters there is a chance that this sub region in your data space is linear. Local explanations can be more accurate compared to global explanations because of this. 1.7 Measuring explainability / comprehensibility / interpretability Model size is an easy way to measure, but might be too simplistic. 1.8 Definitions An Algorithm is a set of rules that a machine follows to achieve a particular goal [1] Machine learning algorithm is an set of rules that a machine follows to learn how to a achieve a particular goal. The output of a machine learning algorithm is a machine learning model. (Machine learning) Model is the outcome of a machine learning algorithm. This can be a set of weights for a linear model or neural network plus the architecture. Features are the variables/information used for prediction/classification/clustering. (machine learning) Task can be classification, regression, survival analysis, clustering, outlier detection Instance One row in the dataset. 1.9 Terminology Y is the target variable in supervised settings. X are the features or covariates. w are the weights. $% are regression weights. [1] https://www.merriam-webster.com/dictionary/algorithm, accessed on Feb. 12th "],
["simple.html", "2 Keep it simple 2.1 Overview 2.2 Linear models 2.3 Decision trees 2.4 Interpretation overview 2.5 Monotonicity constraints between features", " 2 Keep it simple The most straight forward way to achieve explainable machine learning algorithms is to use only a subset algorithms that yield an understandable model structure. These are: Linear models Decision trees Decision rules In the following chapters these we will talk about the algorithm with it’s variants. Not in detail, only the basics, because there are already a ton of books, videos, tutorials, papers and so on about them. We will focus on how to interpret the models and why they are explainable. The chapter covers linear models, decision trees, decision rules, neighbour methods and graphical models. 2.1 Overview Algorithm Linear Monotonicity Interaction built-in Linear models Yes Yes No Decision trees No Not by default Yes Decision rules No Not by default Yes Naive bayes Yes Yes No Nearest neighbours No No No 2.2 Linear models Linear models have been and are still used by statistician, computer scientists and other people with quantitative problems. They learn straightforward linear (and monotonic) relationships between the target and the features. The target changes by a learned weight depending on the feature. Monotonicity makes the interpretation easy. Linear models can be used to model the dependency of a regression variable (here Y) on K covariates. As the name says, the learned relationships are linear in the form of \\[y_{i} = \\beta_{0} + \\beta_{1} \\cdot x_{i,1} + \\ldots + \\beta_{K} x_{i,K} + \\epsilon_{i}\\] The i-th observation’s outcome is a weighted sum of it’s K features. The \\(\\beta_{k}\\) represent the learned feature weights or coefficients. The \\(\\epsilon_{i}\\) is the error we are still making, the difference between the predicted and actual outcome. The biggest advantage is the linearity: It makes the estimation procedure straight forward and most importantly these linear equations have an easy to understand interpretation. That is one of the main reasons why the linear model and all it’s descendants are so widespread in academic fields like medicine, sociology, psychology and many more quantitative research fields. In this areas it is important to not only predict e.g. the clinical outcome of a patient, but also quantify the influence of the medication while at the same time accounting for things like sex, age and other variables. 2.2.1 Interpretation The interpretation of the coefficients: Continuous regression variable: For an increase of one point of the variable \\(x_{j}\\) the estimated outcome changes by \\(\\beta_{j}\\) Binary categorical variables: One of the variables is the reference level (in some languages the one that was coded in 0). A change of the variable \\(x_{i}\\) the reference level to the other category changes the estimated outcome by \\(\\beta_{i}\\) categorical variables with many levels: One solution to deal with many variables is to one-hot-encode them, meaning each level gets it’s own column. From a categorical variable with L levels, you only need L-1 columsn, otherwise it is over parameterized. The interpretation for each level is then according to the binary variables. Some language like R allow to Intercept \\(\\beta_{0}\\): The interpretation is: Given all continuous variables are zero and the categorical variables are on the reference level, the estimated outcome of \\(y_{i}\\) is \\(\\beta_{0}\\). The interpretation of \\(\\beta_{0}\\) is usually not relevant. 2.2.2 Interpretation example Estimate Std. Error (Intercept) 36.4594884 5.1034588 per capita crime rate -0.1080114 0.0328650 proportion of residential land zoned for lots over 25,000 sq.ft 0.0464205 0.0137275 proportion of non-retail business acres per town 0.0205586 0.0614957 Charles River dummy variable (= 1 if tract bounds river; 0 otherwise) 2.6867338 0.8615798 nitric oxides concentration (parts per 10 million) -17.7666112 3.8197437 average number of rooms per dwelling 3.8098652 0.4179253 proportion of owner-occupied units built prior to 1940 0.0006922 0.0132098 weighted distances to five Boston employment centres -1.4755668 0.1994547 index of accessibility to radial highways 0.3060495 0.0663464 full-value property-tax rate per USD 10,000 -0.0123346 0.0037605 pupil-teacher ratio by town -0.9527472 0.1308268 1000(B - 0.63)^2 where B is the proportion of blacks by town 0.0093117 0.0026860 percentage of lower status of the population -0.5247584 0.0507153 Interpretation of a numerical variable (‘average number of rooms per dwelling’): An increase of the average number of rooms by 1 increases the median value of houses in this suburb by \\(3800\\$ (= 3.8 \\cdot 1000)\\), given all other features stay the same. Interpretation of a categorical variable (‘Charles River dummy variable (= 1 if tract bounds river; 0 otherwise)’): The median value of houses in suburbs that bound the Charles River is \\(2690\\$ (= 2.69 \\cdot 1000\\$)\\) compared to houses that do not, given all other features stay the same. As you can see in the interpretation examples, the interpretations are always coming with the clause that ‘all other features stay the same’. That’s because of the nature of linear models: All features are input linearly into the function with no interactions (unless explicitly specified). The good side is, that is isolates the interpretation. If you think of the features as turn-switches that you can turn up or down, it is nice to see what happens when you would just turn the switch for one feature, for example the average number of rooms. But this might not reflect the structure of the data, because the features are often correlated. It might not be meaningful to see the effect of turning up average room sizes because it might be strongly correlated with the proportion of owner-occupied units built prior to 1940. 2.2.3 Visual parameter interpretation 2.2.3.1 Weight plot The information of the coefficient table can also be put into a visualization, which makes the weights and the uncertainty about them can be made understandable on one glance. The weight is displayed as a point and the 95% confidence interval around the point with a line. The 95% confidence interval means that if the linear model was repeated 100 times on coef_plot = function(mod, alpha = 0.05, remove_intercept = TRUE){ lm_summary = summary(mod)$coefficients df = data.frame(Features = rownames(lm_summary), Estimate = lm_summary[,&#39;Estimate&#39;], std_error = lm_summary[,&#39;Std. Error&#39;]) df$lower = df$Estimate - qnorm(alpha/2) * df$std_error df$upper = df$Estimate + qnorm(alpha/2) * df$std_error if(remove_intercept){ df = df[!(df$Features == &#39;(Intercept)&#39;),] } ggplot(df) + geom_point(aes(x=Estimate, y=Features)) + geom_segment(aes(y=Features, yend=Features, x=lower, xend=upper), arrow = arrow(angle=90, ends=&#39;both&#39;, length = unit(0.1, &#39;cm&#39;))) + my_theme } coef_plot(mod) TODO: Add interpetation 2.2.3.2 Effect plot The weights of the linear model only have meaning, when combined with the actual features. The weights depend on the scale of the features and will be different if you have a features measuring some height and you switch from inches to centemeters. The weight will change, but the actual relationships in your data will not. Also it is important to know the distribution of your feature in the data, because if you have a very low variance, it means that almost all instances will get a similar contribution from this feature. The effect plot can help to understand how much the combination of a weight and a feature contributes to the predictions in your data. Start with the computation of the effects, which is the weight per feature times the feature of an instance: \\(eff_{i,k} = w_{k} \\cdot x_{i,k}\\). The resulting effects are visualized with boxplots: The box contains the effect range for half of your data (25% to 75% effect quantiles). The line in the box is the median effect, so 50% of the instances have a lower and the other half a higher effect on the prediction than the median value. The whiskers are \\(+/i 1.58 IQR / \\sqrt{n}\\), with IQR being the inter quartile range ($q_{0.75} - q_{0.25}). The points are outlier to the whiskers. get_effects = function(mod){ X = model.matrix(mod) X = data.frame(predict(mod, type = &#39;terms&#39;)) means = apply(mod$x, 2, mean) * mod$coefficients means = means[names(means) != &quot;(Intercept)&quot;] # predict with type=&#39;terms&#39; centers the results, so we have to add the mean again means_X = matrix(rep(means, times = nrow(X)), nrow=nrow(X), byrow=TRUE) X = X + means_X X } effect_plot = function(mod, feature_names=NULL){ X = get_effects(mod) if(!missing(feature_names)){ rownames(X) = feature_names } X = gather(X) ggplot(X) + geom_boxplot(aes(x=key, y=value, group=key)) + coord_flip() + my_theme } effect_plot(mod) TODO: Add interpetation 2.2.4 Explaining single predictions Why did a certain instance get the prediction it got from the linear model? This can again be answered by bringing together the weights and features and computing the effect. Now the effect will tell you how much each feature contributed towards the sum of the prediction. This is only meaningful if you compare the instance specific effects with the mean effects. i = 1 effects = get_effects(mod) effects_i = gather(effects[i, ]) predictions = predict(mod) predictions_mean = mean(predictions) pred_i = predictions[i] effect_plot(mod) + geom_point(aes(x=key, y=value), color = &#39;red&#39;, data = effects_i) + ggtitle(sprintf(&#39;Predicted value for instance: %.2f\\n Average predicted value: %.2f&#39;, predictions_mean, pred_i)) TODO: Add interpetation 2.2.5 Interpretation templates Interpretation of a numerical feature: An increase of \\(x_{k}\\) by one unit increases the expectation for \\(y\\) by \\(\\beta_x{k}\\) units if all other features X stay the same. Interpretation of a categorical feature: The category coded with 1 of \\(x_{k}\\) increases the expectation for \\(y\\) by \\(\\beta_{k}\\) compared to the reference category (coded with 0). 2.2.6 Coding categorical variables: There are several ways to represent a categorical variable, which has an influence on the interpretation: http://stats.idre.ucla.edu/r/library/r-library-contrast-coding-systems-for-categorical-variables/ and http://heidiseibold.github.io/page7/ Described above is the treatment coding, which is usually sufficient. Using different codings boils down to creating different matrices from your one column with the categorical feature. I present three different codings, but there are many more. The example has six instances and one categorical feature with 3 levels. The first two instances are in category A, instances three and four are in category B and the last two instances are in category C. Treatment coding compares each level to the reference level. The intercept is the mean of the reference group. The first column is the intercept, which is always 1. Column two is an indicator whether instance \\(i\\) is in category B, columns three is an indicator for category C. There is no need for a column for category A, because than the system would be over specified. Knowing that an instance is neither in category B or C is enough. \\[ \\begin{pmatrix} 1 &amp; 0 &amp; 0 \\\\ 1 &amp; 0 &amp; 0 \\\\ 1 &amp; 1 &amp; 0 \\\\ 1 &amp; 1 &amp; 0 \\\\ 1 &amp; 0 &amp; 1 \\\\ 1 &amp; 0 &amp; 1 \\\\ \\end{pmatrix} \\] Effect coding compares each level to the overall mean of \\(y\\). The first column is again the intercept. The weight \\(\\beta_{0}\\) which is associated to the intercept represents the overall mean and \\(\\beta_{1}\\), the weight for column two is the difference between the overall mean and category B. The overall effect of category B is \\(\\beta_{0}\\) + _{1}$. Interpretation for category C is equivalent. For the reference category A, \\(-(\\beta_{1} + \\beta_{2})\\) is the difference of the category C to the overall mean and \\(\\beta_{0} -(\\beta_{1} + \\beta_{2})\\) the overall effect of category C. \\[ \\begin{pmatrix} 1 &amp; -1 &amp; -1 \\\\ 1 &amp; -1 &amp; -1 \\\\ 1 &amp; 1 &amp; 0 \\\\ 1 &amp; 1 &amp; 0 \\\\ 1 &amp; 0 &amp; 1 \\\\ 1 &amp; 0 &amp; 1 \\\\ \\end{pmatrix} \\] Dummy coding compares each level to the level mean of \\(y\\). If all level are have the same frequency the resulting coefficients will be the same as in effect coding. Note that the intercept was dropped here. \\[ \\begin{pmatrix} 1 &amp; 0 &amp; 0 \\\\ 1 &amp; 0 &amp; 0 \\\\ 0 &amp; 1 &amp; 0 \\\\ 0 &amp; 1 &amp; 0 \\\\ 0 &amp; 0 &amp; 1 \\\\ 0 &amp; 0 &amp; 1 \\\\ \\end{pmatrix} \\] 2.2.7 Explaining a single observation: TODO 2.2.8 The disadvantages of linear models They can only represent linear relationships as the name suggests. Each non-linearity or interaction has to be hand-crafted and explicitly given to the model as an input feature. Because of possible high correlation between features, it is possible that a feature that is positively correlated with the outcome might get a negative weight in a linear model, because in the high dimensional space it is negatively correlated. An example: You have a model to predict the rent price and have features like number of rooms and size of the flat. Of course flat size and room number are highly correlated, the bigger a flat the more rooms it has. If you now take both variables into a linear model it might happen, that the flat size is the better predictor and get’s a large positive weight. The room number might end up getting a negative weight, because given that a flat has the same size, increasing the number of rooms could make it less valuable. 2.2.9 Towards complexer relationships within linear model class Adding interactions Adding non-linear terms like polynomials Stratifying data by variable and fitting linear models on subsets 2.2.10 Linear models beyond gaussian regression Logistic regression Lasso, Ridge, elasticnet GAMs Quantile regression 2.3 Decision trees 2.3.1 Explaining: Treeinterpreter https://github.com/andosa/treeinterpreter ## RuleFit ## Decision rules ## Decision tables ## Nearest neighbours ### Learning deep k-nearest neighbour representations ## Bayesian network classifiers ## Naive Bayes Classifier and other graphical models ### Naive bayes Good in case you want interpretation of all features. Bad: No interaction, but even strong assumption of independence of features given the class. But if you indeed have independent features, then it might be the best model. 2.3.2 More general bayesian network approache(s) 2.3.2.1 Bayesian Network-Augmented Naïve Bayes (BAN) illustrated 2.3.2.2 General Bayesian Network 2.4 Interpretation overview INSERT HERE: One example of classification task and one for regression task plus for each a table with the interpretations per model (maybe only example for one variable). Plus verbal template for each interpretation. 2.5 Monotonicity constraints between features "],
["data.html", "3 Explain the data 3.1 visualizations 3.2 PCA 3.3 Biases. Source: https://en.m.wikipedia.org/wiki/Bias_(statistics)", " 3 Explain the data See also here: https://www.oreilly.com/ideas/ideas-on-interpreting-machine-learning Humans can understand visualizations in 1, 2 and 3 dimensions, but beyond that it is not possible. Of course you can also add dimensions by mapping some information on the colors used in a graphic or the size of some symbols, but the dimensionality that can be shown together is very limited. 3.1 visualizations 3.2 PCA 3.2.1 MDS 3.2.2 t-SNE 3.2.3 Glyphs 3.2.4 Correlation Graphs 3.3 Biases. Source: https://en.m.wikipedia.org/wiki/Bias_(statistics) Guidelines for assessing bias ## Compare sample statistics with target population ## Archetype analysis? ## Clustering "],
["model-agnostic-explanations.html", "4 Model-agnostic explanations 4.1 Justification narrative structure for classification 4.2 Global: Explain behaviour of system with data 4.3 Local: Explain single decisions", " 4 Model-agnostic explanations 4.1 Justification narrative structure for classification See also Paper. Idea: Per feature only use effect and importance. This method is per se model-agnostic, but you need a method for computing effect and importance, which is different for each model class. The effect of a feature is how much the feature contributed towards (or against) a classification to a certain category for an instance. In case of a linear model it is simply the j-th weight times the feature value for observation i: \\(\\beta_{j} x_{ij}\\). For classification it is class specific (class k): \\(eff_{ji} = \\beta_{kj} x_{ij}\\) The importance of a feature is defined as the overall strength of a feature within the model. So it is the expected effect of feature j for a particular class. The formula for importance of feature j towards class k is: \\(imp_{ji} = \\beta_{ji} \\frac{\\sum_{x \\in X^j} x_{i}}{|X^j|}\\), where \\(X^j\\) is the set of all instances which have class j. Note that the polarity of a feature (\\(=sign(\\beta_{j})\\)) might be different from the importance, for example when the weight is negative and also the associated feature is negative for most cases in class k. Narrative role of a feature for the classification of an instance depends on effect and importance. Step 1: Decide what magnitude of importance can be seen as high and separate into low and high. This can be done by applying a fixed threshold or keeping a fixed number of features or some kind of ‘ellbow criterium’. The absolute magnitude has to be considered because importance comes both from features that count towards and against a class. Importance Effect High positive Low High negative High positive Normal evidence Missing evidence Contrarian counter-evidence Low Exceptional evidence Negligible Exceptional counter-evidence High negative Contrarian evidence Missing counter-evidence Normal counter-evidence Contrarian evidene and contrarian counter-evidence is only possible with negative features. You should mean center the features, otherwise the importance and the effects will very much look the same (unless the means between the classes vary greatly). The importance and effects are dependent on the scale of your features, but it should not matter whether the a feature is measured in meters or in inch (you should use meter of course) or if it is visits per hour or per minute. Textual template: TODO 4.1.1 Example justification narratives with the vehicle data set The Vehicle dastaset contains the silhoutte descriptions of four types of vehicles. Different features are extracted from the silhouettes from different angles. The four classes are bus, opel, saab and van, but for the purpose of illustration we only focus on the task classifying bus vs. not bus given the silhoutte features. The dataset contains 846 cars with 18 silhoutte features. Table 4.1: Feature importances for the class “bus” Feature Description Importance Comp Compactness 0.3641786 Circ Circularity -0.0168379 D.Circ Distance Circularity 1.3298154 Rad.Ra Radius ratio 1.9065983 Pr.Axis.Ra pr.axis aspect ratio 3.1085208 Max.L.Ra max.length aspect ratio 0.5426764 Scat.Ra scatter ratio -0.2893669 Elong elongatedness 1.6277211 Pr.Axis.Rect pr.axis rectangularity 0.0158149 Max.L.Rect max.length rectangularity -0.1105358 Sc.Var.Maxis scaled variance along major axis 0.4457976 Sc.Var.maxis scaled variance along minor axis 0.6233814 Ra.Gyr scaled radius of gyration 0.1950721 Skew.Maxis skewness about major axis -1.2873672 Skew.maxis skewness about minor axis 0.4024018 Kurt.maxis kurtosis about minor axis -0.4525923 Kurt.Maxis kurtosis about major axis -2.0461912 Holl.Ra hollows ratio 5.9133060 4.2 Global: Explain behaviour of system with data 4.2.1 Global surrogate models A surrogate model is a simple, explainable model that explains a complex machine learning model. ### Partial dependency plots Partial dependency plots show the relationship between the target and one or more features by averaging out all the other features. A dependency plot can show if the relationship between target and feature is linear, monotonic or something else. Are only partially global: It is global because it takes into account all instances, but it is local in the feature, because partial dependency plots only examine one variable, as the name suggests. ### Individual conditional expectation (ICE) plot ### Variable importance ### LOCO (Leave-One-Covariate-Out) ### Interactions ### Residual analysis A residual value is the difference of the models prediction and the actual value. ### Confusion matrix ### Sensitivity analysis of predictions Testing the stability of the model predictions/classifications using simulated data. It can help to trust the model to not be instable in certain settings. 4.3 Local: Explain single decisions 4.3.1 Local surrogate models (LIME) LIME is also a surrogate model, but it is a local one. ## Maximum activation analysis ### LOCO (Leave-One-Covariate-Out) also local ### Max points lost Compare individual prediction with ‘ideal’ case (maximum probability) in terms of points lost per feature. Only works with monotonicity. And ideal case candidate maxes out each feature regarding highest probability of interest. The feature in which the instance is farthest away from the ideal case is the most negative point, why it should not be in class of interest. Feature with point closest to ideal is the least negative reason. "],
["specific.html", "5 Model-specific explanations for complex models 5.1 Global explanations", " 5 Model-specific explanations for complex models 5.1 Global explanations 5.1.1 Random Forests: Treeinterpreter https://github.com/andosa/treeinterpreter ## Local explanations "]
]
